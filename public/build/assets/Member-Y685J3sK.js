import{r as s,g as m,j as O}from"./app-m-HMlsfD.js";const I=s.createContext({dragDropManager:void 0});function c(t,e,...r){if(P()&&e===void 0)throw new Error("invariant requires an error message argument");if(!t){let n;if(e===void 0)n=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{let i=0;n=new Error(e.replace(/%s/g,function(){return r[i++]})),n.name="Invariant Violation"}throw n.framesToPop=1,n}}function P(){return typeof process<"u"&&!0}var y=function t(e,r){if(e===r)return!0;if(e&&r&&typeof e=="object"&&typeof r=="object"){if(e.constructor!==r.constructor)return!1;var n,i,o;if(Array.isArray(e)){if(n=e.length,n!=r.length)return!1;for(i=n;i--!==0;)if(!t(e[i],r[i]))return!1;return!0}if(e.constructor===RegExp)return e.source===r.source&&e.flags===r.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===r.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===r.toString();if(o=Object.keys(e),n=o.length,n!==Object.keys(r).length)return!1;for(i=n;i--!==0;)if(!Object.prototype.hasOwnProperty.call(r,o[i]))return!1;for(i=n;i--!==0;){var a=o[i];if(!t(e[a],r[a]))return!1}return!0}return e!==e&&r!==r};const b=m(y),d=typeof window<"u"?s.useLayoutEffect:s.useEffect;function M(t,e,r){const[n,i]=s.useState(()=>e(t)),o=s.useCallback(()=>{const a=e(t);b(n,a)||(i(a),r&&r())},[n,t,r]);return d(o),[n,o]}function R(t,e,r){const[n,i]=M(t,e,r);return d(function(){const a=t.getHandlerId();if(a!=null)return t.subscribeToStateChange(i,{handlerIds:[a]})},[t,i]),n}function E(t,e,r){return R(e,t||(()=>({})),()=>r.reconnect())}function T(t,e){const r=[];return typeof t!="function"&&r.push(t),s.useMemo(()=>typeof t=="function"?t():t,r)}function x(t){return s.useMemo(()=>t.hooks.dragSource(),[t])}function H(t){return s.useMemo(()=>t.hooks.dragPreview(),[t])}let f=!1,h=!1;class k{receiveHandlerId(e){this.sourceId=e}getHandlerId(){return this.sourceId}canDrag(){c(!f,"You may not call monitor.canDrag() inside your canDrag() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");try{return f=!0,this.internalMonitor.canDragSource(this.sourceId)}finally{f=!1}}isDragging(){if(!this.sourceId)return!1;c(!h,"You may not call monitor.isDragging() inside your isDragging() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");try{return h=!0,this.internalMonitor.isDraggingSource(this.sourceId)}finally{h=!1}}subscribeToStateChange(e,r){return this.internalMonitor.subscribeToStateChange(e,r)}isDraggingSource(e){return this.internalMonitor.isDraggingSource(e)}isOverTarget(e,r){return this.internalMonitor.isOverTarget(e,r)}getTargetIds(){return this.internalMonitor.getTargetIds()}isSourcePublic(){return this.internalMonitor.isSourcePublic()}getSourceId(){return this.internalMonitor.getSourceId()}subscribeToOffsetChange(e){return this.internalMonitor.subscribeToOffsetChange(e)}canDragSource(e){return this.internalMonitor.canDragSource(e)}canDropOnTarget(e){return this.internalMonitor.canDropOnTarget(e)}getItemType(){return this.internalMonitor.getItemType()}getItem(){return this.internalMonitor.getItem()}getDropResult(){return this.internalMonitor.getDropResult()}didDrop(){return this.internalMonitor.didDrop()}getInitialClientOffset(){return this.internalMonitor.getInitialClientOffset()}getInitialSourceClientOffset(){return this.internalMonitor.getInitialSourceClientOffset()}getSourceClientOffset(){return this.internalMonitor.getSourceClientOffset()}getClientOffset(){return this.internalMonitor.getClientOffset()}getDifferenceFromInitialOffset(){return this.internalMonitor.getDifferenceFromInitialOffset()}constructor(e){this.sourceId=null,this.internalMonitor=e.getMonitor()}}function j(t,e,r){const n=r.getRegistry(),i=n.addSource(t,e);return[i,()=>n.removeSource(i)]}function D(t,e,r,n){let i;if(i!==void 0)return!!i;if(t===e)return!0;if(typeof t!="object"||!t||typeof e!="object"||!e)return!1;const o=Object.keys(t),a=Object.keys(e);if(o.length!==a.length)return!1;const l=Object.prototype.hasOwnProperty.bind(e);for(let u=0;u<o.length;u++){const g=o[u];if(!l(g))return!1;const w=t[g],C=e[g];if(i=void 0,i===!1||i===void 0&&w!==C)return!1}return!0}function v(t){return t!==null&&typeof t=="object"&&Object.prototype.hasOwnProperty.call(t,"current")}function N(t){if(typeof t.type=="string")return;const e=t.type.displayName||t.type.name||"the component";throw new Error(`Only native element nodes can now be passed to React DnD connectors.You can either wrap ${e} into a <div>, or turn it into a drag source or a drop target itself.`)}function U(t){return(e=null,r=null)=>{if(!s.isValidElement(e)){const o=e;return t(o,r),o}const n=e;return N(n),F(n,r?o=>t(o,r):t)}}function q(t){const e={};return Object.keys(t).forEach(r=>{const n=t[r];if(r.endsWith("Ref"))e[r]=t[r];else{const i=U(n);e[r]=()=>i}}),e}function S(t,e){typeof t=="function"?t(e):t.current=e}function F(t,e){const r=t.ref;return c(typeof r!="string","Cannot connect React DnD to an element with an existing string ref. Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. Read more: https://reactjs.org/docs/refs-and-the-dom.html#callback-refs"),r?s.cloneElement(t,{ref:n=>{S(r,n),S(e,n)}}):s.cloneElement(t,{ref:e})}class V{receiveHandlerId(e){this.handlerId!==e&&(this.handlerId=e,this.reconnect())}get connectTarget(){return this.dragSource}get dragSourceOptions(){return this.dragSourceOptionsInternal}set dragSourceOptions(e){this.dragSourceOptionsInternal=e}get dragPreviewOptions(){return this.dragPreviewOptionsInternal}set dragPreviewOptions(e){this.dragPreviewOptionsInternal=e}reconnect(){const e=this.reconnectDragSource();this.reconnectDragPreview(e)}reconnectDragSource(){const e=this.dragSource,r=this.didHandlerIdChange()||this.didConnectedDragSourceChange()||this.didDragSourceOptionsChange();return r&&this.disconnectDragSource(),this.handlerId?e?(r&&(this.lastConnectedHandlerId=this.handlerId,this.lastConnectedDragSource=e,this.lastConnectedDragSourceOptions=this.dragSourceOptions,this.dragSourceUnsubscribe=this.backend.connectDragSource(this.handlerId,e,this.dragSourceOptions)),r):(this.lastConnectedDragSource=e,r):r}reconnectDragPreview(e=!1){const r=this.dragPreview,n=e||this.didHandlerIdChange()||this.didConnectedDragPreviewChange()||this.didDragPreviewOptionsChange();if(n&&this.disconnectDragPreview(),!!this.handlerId){if(!r){this.lastConnectedDragPreview=r;return}n&&(this.lastConnectedHandlerId=this.handlerId,this.lastConnectedDragPreview=r,this.lastConnectedDragPreviewOptions=this.dragPreviewOptions,this.dragPreviewUnsubscribe=this.backend.connectDragPreview(this.handlerId,r,this.dragPreviewOptions))}}didHandlerIdChange(){return this.lastConnectedHandlerId!==this.handlerId}didConnectedDragSourceChange(){return this.lastConnectedDragSource!==this.dragSource}didConnectedDragPreviewChange(){return this.lastConnectedDragPreview!==this.dragPreview}didDragSourceOptionsChange(){return!D(this.lastConnectedDragSourceOptions,this.dragSourceOptions)}didDragPreviewOptionsChange(){return!D(this.lastConnectedDragPreviewOptions,this.dragPreviewOptions)}disconnectDragSource(){this.dragSourceUnsubscribe&&(this.dragSourceUnsubscribe(),this.dragSourceUnsubscribe=void 0)}disconnectDragPreview(){this.dragPreviewUnsubscribe&&(this.dragPreviewUnsubscribe(),this.dragPreviewUnsubscribe=void 0,this.dragPreviewNode=null,this.dragPreviewRef=null)}get dragSource(){return this.dragSourceNode||this.dragSourceRef&&this.dragSourceRef.current}get dragPreview(){return this.dragPreviewNode||this.dragPreviewRef&&this.dragPreviewRef.current}clearDragSource(){this.dragSourceNode=null,this.dragSourceRef=null}clearDragPreview(){this.dragPreviewNode=null,this.dragPreviewRef=null}constructor(e){this.hooks=q({dragSource:(r,n)=>{this.clearDragSource(),this.dragSourceOptions=n||null,v(r)?this.dragSourceRef=r:this.dragSourceNode=r,this.reconnectDragSource()},dragPreview:(r,n)=>{this.clearDragPreview(),this.dragPreviewOptions=n||null,v(r)?this.dragPreviewRef=r:this.dragPreviewNode=r,this.reconnectDragPreview()}}),this.handlerId=null,this.dragSourceRef=null,this.dragSourceOptionsInternal=null,this.dragPreviewRef=null,this.dragPreviewOptionsInternal=null,this.lastConnectedHandlerId=null,this.lastConnectedDragSource=null,this.lastConnectedDragSourceOptions=null,this.lastConnectedDragPreview=null,this.lastConnectedDragPreviewOptions=null,this.backend=e}}function p(){const{dragDropManager:t}=s.useContext(I);return c(t!=null,"Expected drag drop context"),t}function Y(t,e){const r=p(),n=s.useMemo(()=>new V(r.getBackend()),[r]);return d(()=>(n.dragSourceOptions=t||null,n.reconnect(),()=>n.disconnectDragSource()),[n,t]),d(()=>(n.dragPreviewOptions=e||null,n.reconnect(),()=>n.disconnectDragPreview()),[n,e]),n}function L(){const t=p();return s.useMemo(()=>new k(t),[t])}class W{beginDrag(){const e=this.spec,r=this.monitor;let n=null;return typeof e.item=="object"?n=e.item:typeof e.item=="function"?n=e.item(r):n={},n??null}canDrag(){const e=this.spec,r=this.monitor;return typeof e.canDrag=="boolean"?e.canDrag:typeof e.canDrag=="function"?e.canDrag(r):!0}isDragging(e,r){const n=this.spec,i=this.monitor,{isDragging:o}=n;return o?o(i):r===e.getSourceId()}endDrag(){const e=this.spec,r=this.monitor,n=this.connector,{end:i}=e;i&&i(r.getItem(),r),n.reconnect()}constructor(e,r,n){this.spec=e,this.monitor=r,this.connector=n}}function z(t,e,r){const n=s.useMemo(()=>new W(t,e,r),[e,r]);return s.useEffect(()=>{n.spec=t},[t]),n}function $(t){return s.useMemo(()=>{const e=t.type;return c(e!=null,"spec.type must be defined"),e},[t])}function A(t,e,r){const n=p(),i=z(t,e,r),o=$(t);d(function(){if(o!=null){const[l,u]=j(o,i,n);return e.receiveHandlerId(l),r.receiveHandlerId(l),u}},[n,e,r,i,o])}function G(t,e){const r=T(t);c(!r.begin,"useDrag::spec.begin was deprecated in v14. Replace spec.begin() with spec.item(). (see more here - https://react-dnd.github.io/react-dnd/docs/api/use-drag)");const n=L(),i=Y(r.options,r.previewOptions);return A(r,n,i),[E(r.collect,n,i),x(i),H(i)]}function K({name:t}){const[{isDragging:e},r]=G(()=>({type:"MEMBER",item:{name:t},collect:n=>({isDragging:!!n.isDragging()})}));return O.jsx("div",{ref:r,style:{opacity:e?.5:1},children:t})}export{K as default};
